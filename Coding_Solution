Technical Test (Subjective) 
Q1) 1) Help Sheeba out 
#include <iostream>
#include<unordered_map>
using namespace std;
 Algorithm 
1) Push all the element in the map.
2) and increment the map on their index value
3) Now again traverse the map from 0 to n
4)If value of index of a particular element is greater than 0 than print that number and mark to 0 , s that it cannot be repeat again; 

code
int main() {
	// your code goes here
	int n;
	cin>>n;
	int *arr = new int[n];
	unordered_map<int,int> m;
	for(int i = 0; i < n; i++){
		cin>>arr[i];
		m[arr[i]]++;
	}
 
	for(int i = 0; i < n; i++){
		if(m[arr[i]] > 0){
			cout<<arr[i]<<" ";
			m[arr[i]] = 0;
		}
 
	}
	return 0;
}

Time Complexity of the above code is o(n)
---------------------------------------------------------------------------------------
Q3) Closest to zero 
Algorithm 
1) Sort all the elements of the input array.
2) Use two index variables l and r to traverse from left and right ends respectively. Initialize l as 0 and r as n-1.
3) sum = a[l] + a[r]
4) If sum is -ve, then l++
5) If sum is +ve, then râ€“
6) Keep track of abs min sum.

Code
#include <iostream>
# include <math.h>
#include<limits.h>
#include<algorithm>
using namespace std;

int main() {
	int n;
	cin>>n;
	int *arr = new int[n];
	for(int i = 0; i < n; i++){
		cin>>arr[i];
	}
	if(n < 2)
	  cout<<"Invalid Input";
	  else{
	  	sort(arr,arr+n);
	  	int sum, min_sum = 100000;
 
         int l = 0, r = n-1;
 
         int min_l = l, min_r = n-1;
	
	  	while(l < r)
                                     {
   		       sum = arr[l] + arr[r];
 
		      if(abs(sum) < abs(min_sum))
    			{
      				min_sum = sum;
     				 min_l = l;
      				min_r = r;
    			}
    	if(sum < 0)
      	   l++;
    	else
      	   r--;
       }
	  	cout<<" The two elements whose sum is minimum are  "<<arr[min_l]<<"  "<<arr[min_r];
	
 	}
}

Time complexity of the code is o(nlog(n))
